https://leetcode.com/problems/burst-balloons/

Consider this array: [3,1,5,8].
Each number represents the points you get on bursting the balloon at its particular index.
For above array, we can get maximum points if we burst 1(3*1*5)-> (5)3*5*8 ->(3)1*3*8->(8)1*8*1
So the sequence of bursting 1,5,3,8 gives the maximum ans of 167.

One solution is to use backtracking. For each element, burst it, count the sum obtained and replace that element by -1 to denote
this balloon is burst. Now after the first element is burnt, burn all element one by one in each iteration and calculate the sum obtained
by each combinations.
For example, let start with burning balloon with value 3(index=0). Array is [-1,1,5,8]
count=1*3*1=3;
now we can burn 1 or 5 or 8.
For each available element, burn them and calculate the sum.

Lets burn 1, count=3+(1*1*5)=8
Now we are left with [-1,-1,5,8]. Lets burn 5. count=8+(1*5*8)=48.
Array is now [-1,-1,-1,8]. Lets burn 8. Now count=48+(1*8*1)=56.

What if we have burnt 8 first and then 5 when array wash [-1,-1,5,8].
So we backtrack  now and array becomes [-1,-1,5,8]. count=8+(5*8*1)+(1*5*1)=8+40+5=53.
What if we burnt 5 first and then 1 and then 8.
So we are running for loop for each element to find the possible combinations. Inside for loop, we call this function again to
  find the combination with next elements.
 At the last of loop, we backtrack to reset the element to previous value
so that count can be computed with different combination with next available elements.
Backtracking normally runs like :
func(arr){
for (each element){
store current element to temp.
set current element to -1
func(arr)
backtrack -1 to temp value.

}

This solution works but takes time since we don't memoize it.
