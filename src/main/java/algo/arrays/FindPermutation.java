package algo.arrays;

import java.util.ArrayList;
import java.util.List;

public class FindPermutation {

    public static void main(String[] args) {


        // List<Integer> response= new FindPermutation().findPermutation("DIDIDIDIDIDID");
        // List<Integer> response= new FindPermutation().findPermutation("IDIDIDIDIDID",345);
        // List<Integer> response= new FindPermutation().findPermutation("DDDDDD",345);
         List<Integer> response= new FindPermutation().findPermutationNew("ID",3);
//       List<Integer> response= new FindPermutation().findPermutationNew(
//               "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"
//               ,354);
//        List<Integer> response = new FindPermutation().findPermutationNew(

//                , 743);


        //354 353 352 351 350 349 348 347 346 345 344 343 342 341 340 339 338
        // 337 336 335 334 333 332 331 330 329 328 327 326 325 324 323 322 321
        // 320 319 318 317 316 315 314 313 312 311 310 309 308 307 306 305 304
        // 303 302 301 300 299 298 297 296 295 294 293 292 291 290 289 288 287
        // 286 285 284 283 282 281 280 279 278 277 276 275 274 273 272 271 270
        // 269 268 267 266 265 264 263 262 261 260 259 258 257 256 255 254 253
        // 252 251 250 249 248 247 246 245 244 243 242 241 240 239 238 237 236
        // 235 234 233 232 231 230 229 228 227 226 225 224 223 222 221 220 219
        // 218 217 216 215 214 213 212 211 210 209 208 207 206 205 204 203 202
        // 201 200 199 198 197 196 195 194 193 192 191 190 189 188 187 186 185
        // 184 183 182 181 180 179 178 177 176 175 174 173 172 171 170 169 168
        // 167 166 165 164 163 162 161 160 159 158 157 156 155 154 153 152 151
        // 150 149 148 147 146 145 144 143 142 141 140 139 138 137 136 135 134
        // 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117
        // 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100
        // 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78
        // 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56
        // 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34
        // 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12
        // 11 10 9 8 7 6 5 4 3 2 1
        System.out.println(response);
    }

    private List<Integer> findPermutation(String s, int B) {
        int i = 0, n = B;
        int maxIndex = 0;
        ArrayList<Integer> result = new ArrayList<>();
        if (!s.contains("I")) {
            for (int k = B; k > 0; k--) {
                result.add(k);
            }
            return result;
        }
        if (!s.contains("D")) {
            for (int k = 1; k <= B; k++) {
                result.add(k);
            }
            return result;
        }
        for (char c : s.toCharArray()) {
            if (i == B) {
                break;
            }
            if (c == 'D') {
                if (i == 0) {
                    result.add(maxIndex = i, n + 1);
                    result.add(i + 1, n);
                    i += 2;

                } else {
                    int tmpValue = result.get(maxIndex);
                    result.set(i - 1, result.get(maxIndex) + 1);
                    maxIndex = i - 1;
                    result.add(i, tmpValue);
                    i++;

                }


            } else if (c == 'I') {

                if (i == 0) {
                    result.add(i, n);
                    result.add(maxIndex = (i + 1), n + 1);
                    i += 2;
                } else {
                    result.add(i, result.get(maxIndex) + 1);
                    maxIndex = i;
                    i++;
                }

            }
            //  i+=2;
        }

        return result;
    }

    private List<Integer> findPermutationNew(String s, int B) {

        int min = 1;
        int max = B;
        char[] inputs = s.toCharArray();
        List<Integer> response = new ArrayList<>();

        for (int index = 0; index < inputs.length; index++) {
            char currentInput = inputs[index];

            if (currentInput == 'D') {
                response.add(max);
                max--;

            } else {
                response.add(min);
                min++;
            }
        }
        if(inputs[inputs.length-1]=='I'){
            response.add(max);
        }
        else {
            response.add(min);
        }
        return response;

    }
    /*
    DIDI,354
    354,1,353,2,352

     */
}

/*
A : "IIIDDDDDDDDIDDDIDDIIDDDDDDIIIIDIIIDDDIDIIIDDDIDDDDDDIIIDDDIIDDIIDIDIIIDIDIDIIIDDIIIIIDIIIIIDDIDDIDDDDIDIIDDIDIIDDIIDDIDDIDDDIIIIDIDDIDDDIIDDDDDIIDDDDDDDIIIIIDDIDIDDDIIDDIDIDIIDDDDIIIDDIDDIIIIDDDDIIDIDDDDDDDIIIDIDDDIDIDIDIIIDIDDIDDDIIIDDDIDDDDIDIIIDIIIIDIDDIIDDIIDIIDIDDDIIDDDDDIIDIIDDDIIDDDIDDDDDIDIDDDIIIDDDDIDIIIDDDIIIDIDDIIIIIDIDIIDIDIDDIIDDDIIIIDIIDDDDDDIDIIIIIDIDIIIIIDDDIIDIDDIIIDIIDIDDIIIIDIDDIIIDDDIDDIIIDIDIIDIDDDIDDIDDDIIDIIIIIDDDDDIIIDIIIIDDIDIDIDIDDDIIDDIDIDDDDDDDIIDIIIDIDDIDIIIDDDDDIDIIDDDIIIDIIIIDIDDDIDDIIDIDIDIIDDIIIDIDIDDIDIDDDDIIIDIIDIIDIIIDDIDIIDDIIIIDIIIIDIIDIIIDDIIDIIIIDDIDIDDIDDDIDDIIDIIDIIIDIDIIDIIIDIDDDIDDIIDDDDIDDIIDIDDIIDIDIDIDDDDDIIIIDDDIIDDDDIIDDDDDDIIDDIIIIDDIIDIDIDDIDDDIDIIIDDDIDDDIIIDIDIIDIIIIDIDIDIDIIDIIID"
B : 743

The expected return value:

Your function returned the following:
1 2 3 5 6 7 8 9 10 11 12 11 14 15 16 15 18 19 18 20 22 23 24 25 26 27 26 28 29 30 32 31 33 34 36 37 38 37 40 39 41 42 44 45 46 45 48 49 50 51 52 53 52 54 55 57 58 59 58 60 62 63 62 64 66 65 68 67 69 70 72 71 74 73 76 75 77 78 80 81 80 82 83 84 85 87 86 88 89 90 91 93 94 93 96 97 96 99 100 101 102 101 104 103 105 107 108 107 110 109 111 113 114 113 115 117 118 117 120 121 120 123 124 125 124 126 127 128 130 129 132 133 132 135 136 137 136 138 140 141 142 143 144 143 145 147 148 149 150 151 152 153 152 154 155 156 157 159 160 159 162 161 164 165 166 165 167 169 170 169 172 171 174 173 175 177 178 179 180 179 181 182 184 185 184 187 188 187 189 190 191 193 194 195 196 195 197 199 198 201 202 203 204 205 206 207 206 208 209 211 210 213 214 215 214 217 216 219 218 221 220 222 223 225 224 227 228 227 230 231 232 231 233 234 236 237 238 237 240 241 242 243 242 245 244 246 247 249 248 250 251 252 254 253 256 257 256 258 260 261 260 262 264 263 265 267 266 269 270 271 270 272 274 275 276 277 278 277 279 281 280 282 284 285 286 285 287 289 290 291 290 293 294 295 296 297 296 299 298 301 302 303 302 304 305 307 308 309 310 309 312 311 313 314 316 317 318 317 319 320 322 321 324 325 324 326 327 328 329 331 330 333 332 334 336 335 338 337 340 341 340 342 344 345 346 345 347 348 349 351 350 352 354 355 356 357 358 359 358 361 360 362 363 364 365 367 366 369 368 370 371 372 373 375 376 377 376 378 380 379 382 383 382 384 385 387 386 388 390 389 392 393 392 394 395 396 398 397 400 401 400 402 403 405 406 407 406 409 410 409 411 412 414 413 416 415 417 419 418 421 422 423 422 425 426 425 428 429 430 429 431 433 432 434 435 436 437 439 440 441 442 443 442 444 445 447 446 448 449 450 452 453 452 455 454 457 456 459 458 461 462 463 462 464 466 467 466 469 468 471 472 473 474 475 476 477 476 478 480 479 481 482 484 483 486 487 486 489 488 490 491 493 494 495 496 497 496 499 498 500 502 503 504 503 505 506 508 507 509 510 511 513 512 515 516 517 516 519 520 519 521 523 522 525 524 527 526 528 530 531 530 532 533 535 534 537 536 539 540 539 542 541 544 545 546 547 546 548 549 551 550 552 554 553 555 557 556 558 559 561 562 561 564 563 565 567 568 567 569 570 571 573 572 574 575 576 578 577 579 581 580 582 583 585 586 585 587 589 588 590 591 592 594 595 594 597 596 599 600 599 602 603 604 603 606 607 606 608 610 609 611 613 612 614 615 617 616 619 618 620 622 621 623 624 626 625 628 629 630 629 632 633 632 634 636 637 638 639 638 641 642 641 643 645 644 647 648 647 649 651 650 653 652 655 654 657 658 659 660 661 660 662 663 664 666 667 668 667 669 671 672 673 674 673 675 677 678 679 680 681 682 681 683 685 686 685 687 688 689 691 692 691 693 695 694 697 696 699 700 699 702 703 704 703 706 705 707 708 710 711 712 711 714 715 716 715 717 718 720 719 722 721 723 725 724 726 727 728 730 729 732 731 734 733 736 735 737 739 738 740 741 743 742
 */
